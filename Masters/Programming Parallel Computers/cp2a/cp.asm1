	.file	"cp.cc"
# GNU C++14 (Ubuntu 5.4.0-6ubuntu1~16.04.11) version 5.4.0 20160609 (x86_64-linux-gnu)
#	compiled by GNU C version 5.4.0 20160609, GMP version 6.1.0, MPFR version 3.1.4, MPC version 1.0.3
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -I ./ -I ./../cp-common -I ./../common
# -imultiarch x86_64-linux-gnu -D_GNU_SOURCE cp.cc -march=broadwell -mmmx
# -mno-3dnow -msse -msse2 -msse3 -mssse3 -mno-sse4a -mcx16 -msahf -mmovbe
# -maes -mno-sha -mpclmul -mpopcnt -mabm -mno-lwp -mfma -mno-fma4 -mno-xop
# -mbmi -mbmi2 -mno-tbm -mavx -mavx2 -msse4.2 -msse4.1 -mlzcnt -mrtm -mhle
# -mrdrnd -mf16c -mfsgsbase -mrdseed -mprfchw -madx -mfxsr -mxsave
# -mxsaveopt -mno-avx512f -mno-avx512er -mno-avx512cd -mno-avx512pf
# -mno-prefetchwt1 -mclflushopt -mxsavec -mxsaves -mno-avx512dq
# -mno-avx512bw -mno-avx512vl -mno-avx512ifma -mno-avx512vbmi -mno-clwb
# -mno-pcommit -mno-mwaitx --param l1-cache-size=32
# --param l1-cache-line-size=64 --param l2-cache-size=8192 -mtune=generic
# -g -O3 -Wall -Wextra -Werror -Wno-error=unknown-pragmas
# -Wno-error=unused-but-set-variable -Wno-error=unused-local-typedefs
# -Wno-error=unused-function -Wno-error=unused-label
# -Wno-error=unused-value -Wno-error=unused-variable
# -Wno-error=unused-parameter -Wno-error=unused-but-set-parameter
# -std=c++1z -fverbose-asm -fstack-protector-strong -Wformat-security
# options enabled:  -faggressive-loop-optimizations -falign-labels
# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg
# -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
# -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
# -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
# -fchkp-use-static-const-bounds -fchkp-use-wrappers
# -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
# -fcrossjumping -fcse-follow-jumps -fdefer-pop
# -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
# -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
# -fexceptions -fexpensive-optimizations -fforward-propagate -ffunction-cse
# -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime -fgnu-unique
# -fguess-branch-probability -fhoist-adjacent-loads -fident -fif-conversion
# -fif-conversion2 -findirect-inlining -finline -finline-atomics
# -finline-functions -finline-functions-called-once
# -finline-small-functions -fipa-cp -fipa-cp-alignment -fipa-cp-clone
# -fipa-icf -fipa-icf-functions -fipa-icf-variables -fipa-profile
# -fipa-pure-const -fipa-ra -fipa-reference -fipa-sra -fira-hoist-pressure
# -fira-share-save-slots -fira-share-spill-slots
# -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
# -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
# -fmath-errno -fmerge-constants -fmerge-debug-strings
# -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
# -foptimize-strlen -fpartial-inlining -fpeephole -fpeephole2
# -fpredictive-commoning -fprefetch-loop-arrays -free -freg-struct-return
# -freorder-blocks -freorder-blocks-and-partition -freorder-functions
# -frerun-cse-after-loop -fsched-critical-path-heuristic
# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-fusion
# -fschedule-insns2 -fsemantic-interposition -fshow-column -fshrink-wrap
# -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types -fssa-phiopt
# -fstack-protector-strong -fstdarg-opt -fstrict-aliasing -fstrict-overflow
# -fstrict-volatile-bitfields -fsync-libcalls -fthread-jumps
# -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp -ftree-builtin-call-dce
# -ftree-ccp -ftree-ch -ftree-coalesce-vars -ftree-copy-prop
# -ftree-copyrename -ftree-cselim -ftree-dce -ftree-dominator-opts
# -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
# -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
# -ftree-loop-optimize -ftree-loop-vectorize -ftree-parallelize-loops=
# -ftree-partial-pre -ftree-phiprop -ftree-pre -ftree-pta -ftree-reassoc
# -ftree-scev-cprop -ftree-sink -ftree-slp-vectorize -ftree-slsr -ftree-sra
# -ftree-switch-conversion -ftree-tail-merge -ftree-ter -ftree-vrp
# -funit-at-a-time -funswitch-loops -funwind-tables -fvar-tracking
# -fvar-tracking-assignments -fverbose-asm -fzero-initialized-in-bss
# -m128bit-long-double -m64 -m80387 -mabm -madx -maes -malign-stringops
# -mavx -mavx2 -mavx256-split-unaligned-load -mavx256-split-unaligned-store
# -mbmi -mbmi2 -mclflushopt -mcx16 -mf16c -mfancy-math-387 -mfma
# -mfp-ret-in-387 -mfsgsbase -mfxsr -mglibc -mhle -mieee-fp
# -mlong-double-80 -mlzcnt -mmmx -mmovbe -mpclmul -mpopcnt -mprfchw
# -mpush-args -mrdrnd -mrdseed -mred-zone -mrtm -msahf -msse -msse2 -msse3
# -msse4 -msse4.1 -msse4.2 -mssse3 -mtls-direct-seg-refs -mvzeroupper
# -mxsave -mxsavec -mxsaveopt -mxsaves

	.text
.Ltext0:
	.section	.text.unlikely,"ax",@progbits
.LCOLDB2:
	.text
.LHOTB2:
	.p2align 4,,15
	.section	.text.unlikely
.Ltext_cold0:
	.text
	.globl	correlate(int, int, float const*, float*)
	.type	correlate(int, int, float const*, float*), @function
correlate(int, int, float const*, float*):
.LFB21:
	.file 1 "cp.cc"
	.loc 1 145 0
	.cfi_startproc
.LVL0:
	pushq	%r13	#
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	leaq	16(%rsp), %r13	#,
	.cfi_def_cfa 13, 0
	andq	$-32, %rsp	#,
	pushq	-8(%r13)	#
	pushq	%rbp	#
	.cfi_escape 0x10,0x6,0x2,0x76,0
	movq	%rsp, %rbp	#,
	pushq	%r15	#
	pushq	%r14	#
	pushq	%r13	#
	.cfi_escape 0xf,0x3,0x76,0x68,0x6
	.cfi_escape 0x10,0xf,0x2,0x76,0x78
	.cfi_escape 0x10,0xe,0x2,0x76,0x70
	pushq	%r12	#
	movl	%edi, %r15d	# ny, ny
	pushq	%rbx	#
	.cfi_escape 0x10,0xc,0x2,0x76,0x60
	.cfi_escape 0x10,0x3,0x2,0x76,0x58
	movl	%esi, %ebx	# nx, nx
	subq	$168, %rsp	#,
	.loc 1 145 0
	movl	%edi, -92(%rbp)	# ny, %sfp
	movq	%rdx, -56(%rbp)	# data, %sfp
	.loc 1 146 0
	imull	%esi, %edi	# nx, D.4868
.LVL1:
	movl	$8, %esi	#,
.LVL2:
	.loc 1 145 0
	movq	%rcx, -160(%rbp)	# result, %sfp
	.loc 1 146 0
	movslq	%edi, %rdi	# D.4868, D.4869
	call	calloc	#
.LVL3:
.LBB16:
.LBB17:
	.loc 1 9 0
	leal	-1(%rbx), %edi	#, i5
.LBB18:
	.loc 1 12 0
	testl	%r15d, %r15d	# ny
	movq	-56(%rbp), %r9	# %sfp, data
.LBE18:
	.loc 1 9 0
	movl	%edi, -64(%rbp)	# i5, %sfp
.LVL4:
.LBB38:
	.loc 1 12 0
	jle	.L29	#,
	movl	%ebx, %r12d	# nx, tmp446
	movslq	%ebx, %rdx	# nx, D.4875
	movl	%ebx, %edi	# nx, D.4868
.LVL5:
	shrl	$31, %r12d	#, tmp446
	andl	$1, %edi	#, D.4868
	leaq	0(,%rdx,4), %rsi	#, D.4875
	addl	%ebx, %r12d	# nx, tmp447
	movl	%edi, -60(%rbp)	# D.4868, %sfp
	xorl	%r8d, %r8d	#
	sarl	%r12d	# D.4868
	movq	%rsi, -104(%rbp)	# D.4875, %sfp
	leaq	0(,%rdx,8), %rsi	#, D.4875
	addl	%edi, %r12d	# D.4868, D.4868
	leal	-1(%rbx), %edi	#, i5
	movq	%r9, %r14	# data, ivtmp.103
	movq	%rsi, -112(%rbp)	# D.4875, %sfp
	vxorpd	%xmm5, %xmm5, %xmm5	# D.4873
	movslq	%edi, %rdx	# i5, D.4876
	movl	%edi, %r11d	# i5, ivtmp.92
	movl	%edi, -96(%rbp)	# i5, %sfp
	leaq	0(,%rdx,4), %rsi	#, D.4876
	subl	%r12d, %r11d	# D.4868, ivtmp.92
	movq	%rax, %r13	# ProcessedData, ivtmp.106
	vcvtsi2sd	%ebx, %xmm5, %xmm5	# nx, D.4873, D.4873
	movl	$0, -56(%rbp)	#, %sfp
.LVL6:
	vxorpd	%xmm4, %xmm4, %xmm4	# Sum
	movq	%rsi, -120(%rbp)	# D.4876, %sfp
	leaq	0(,%rdx,8), %rsi	#, D.4876
.LBB19:
.LBB20:
	.loc 1 47 0
	movl	$1, %edx	#, tmp561
	subl	%ebx, %edx	# nx, D.4877
.LBE20:
.LBB21:
	.loc 1 17 0
	testl	%r12d, %r12d	# D.4868
	movq	%rax, %r15	# ProcessedData, ProcessedData
.LVL7:
.LBE21:
.LBB22:
	.loc 1 47 0
	movl	%edx, -140(%rbp)	# D.4877, %sfp
	movl	%edi, %edx	# i5, D.4875
	movq	%rsi, -128(%rbp)	# D.4876, %sfp
	leaq	1(%rdx), %rdi	#, D.4875
	movq	%rdi, -136(%rbp)	# D.4875, %sfp
.LBE22:
.LBB23:
	.loc 1 17 0
	jle	.L35	#,
.LVL8:
.L64:
	movq	-120(%rbp), %rax	# %sfp, D.4876
	vmovapd	%xmm4, %xmm0	# Sum, Sum2
	vmovapd	%xmm4, %xmm1	# Sum, Sum1
	leaq	(%r14,%rax), %rdx	#, ivtmp.83
	xorl	%eax, %eax	# ivtmp.74
.LVL9:
	.p2align 4,,10
	.p2align 3
.L4:
	.loc 1 19 0
	vxorpd	%xmm2, %xmm2, %xmm2	# D.4873
	subq	$4, %rdx	#, ivtmp.83
	vcvtss2sd	(%r14,%rax,4), %xmm2, %xmm2	# MEM[base: _113, index: ivtmp.74_262, step: 4, offset: 0B], D.4873, D.4873
	addq	$1, %rax	#, ivtmp.74
.LVL10:
	vaddsd	%xmm2, %xmm1, %xmm1	# D.4873, Sum1, Sum1
.LVL11:
	.loc 1 20 0
	vxorpd	%xmm2, %xmm2, %xmm2	# D.4873
	vcvtss2sd	4(%rdx), %xmm2, %xmm2	# MEM[base: _112, offset: 0B], D.4873, D.4873
	.loc 1 17 0
	cmpl	%eax, %r12d	# ivtmp.74, D.4868
	.loc 1 20 0
	vaddsd	%xmm2, %xmm0, %xmm0	# D.4873, Sum2, Sum2
.LVL12:
	.loc 1 17 0
	jg	.L4	#,
	movslq	%r11d, %rax	# ivtmp.92,
.LVL13:
.L3:
.LBE23:
	.loc 1 26 0
	movl	-60(%rbp), %esi	# %sfp,
	testl	%esi, %esi	#
	je	.L5	#,
	.loc 1 29 0
	vxorpd	%xmm2, %xmm2, %xmm2	# D.4873
	vcvtss2sd	4(%r9,%rax,4), %xmm2, %xmm2	# *_70, D.4873, D.4873
	vsubsd	%xmm2, %xmm0, %xmm0	# D.4873, Sum2, Sum2
.LVL14:
.L5:
	.loc 1 33 0
	vaddsd	%xmm1, %xmm0, %xmm0	# Sum1, Sum2, Sum1
.LVL15:
.LBB24:
	.loc 1 45 0
	testl	%ebx, %ebx	# nx
	leal	(%rbx,%r8), %edx	#, D.4877
.LVL16:
.LBE24:
	.loc 1 43 0
	vdivsd	%xmm5, %xmm0, %xmm0	# D.4873, Sum1, Sum1
.LVL17:
.LBB25:
	.loc 1 45 0
	jle	.L18	#,
	movslq	%r8d, %rdi	# i1, D.4869
	leaq	(%r15,%rdi,8), %rax	#, vectp.7
	movq	%rax, %rsi	# vectp.7, D.4876
	andl	$31, %esi	#, D.4876
	shrq	$3, %rsi	#, D.4876
	negq	%rsi	# D.4876
	andl	$3, %esi	#, D.4877
	cmpl	%ebx, %esi	# nx, D.4877
	cmova	%ebx, %esi	# D.4877,, nx, prologue_after_cost_adjust.9
	cmpl	$8, %ebx	#, nx
	cmovbe	%ebx, %esi	# prologue_after_cost_adjust.9,, nx, prologue_after_cost_adjust.9
	testl	%esi, %esi	# prologue_after_cost_adjust.9
	je	.L37	#,
	cmpl	$1, %esi	#, prologue_after_cost_adjust.9
	.loc 1 47 0
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	vcvtss2sd	(%r9,%rdi,4), %xmm1, %xmm1	# *_144, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%rax)	# D.4873, MEM[(double *)vectp.7_372]
.LVL18:
	je	.L38	#,
	movl	-140(%rbp), %eax	# %sfp, D.4877
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	addl	%edx, %eax	# D.4877, D.4877
	cmpl	$2, %esi	#, prologue_after_cost_adjust.9
	cltq
	vcvtss2sd	(%r9,%rax,4), %xmm1, %xmm1	# *_56, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rax,8)	# D.4873, *_74
.LVL19:
	je	.L39	#,
	movl	%edx, %eax	# D.4877, D.4877
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	subl	%ebx, %eax	# nx, D.4877
	addl	$2, %eax	#, D.4877
	cmpl	$3, %esi	#, prologue_after_cost_adjust.9
	cltq
	vcvtss2sd	(%r9,%rax,4), %xmm1, %xmm1	# *_9, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rax,8)	# D.4873, *_14
.LVL20:
	je	.L40	#,
	movl	%edx, %eax	# D.4877, D.4877
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	subl	%ebx, %eax	# nx, D.4877
	addl	$3, %eax	#, D.4877
	cmpl	$4, %esi	#, prologue_after_cost_adjust.9
	cltq
	vcvtss2sd	(%r9,%rax,4), %xmm1, %xmm1	# *_190, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rax,8)	# D.4873, *_83
.LVL21:
	je	.L41	#,
	movl	%edx, %eax	# D.4877, D.4877
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	subl	%ebx, %eax	# nx, D.4877
	addl	$4, %eax	#, D.4877
	cmpl	$5, %esi	#, prologue_after_cost_adjust.9
	cltq
	vcvtss2sd	(%r9,%rax,4), %xmm1, %xmm1	# *_389, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rax,8)	# D.4873, *_387
.LVL22:
	je	.L42	#,
	movl	%edx, %eax	# D.4877, D.4877
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	subl	%ebx, %eax	# nx, D.4877
	addl	$5, %eax	#, D.4877
	cmpl	$6, %esi	#, prologue_after_cost_adjust.9
	cltq
	vcvtss2sd	(%r9,%rax,4), %xmm1, %xmm1	# *_404, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rax,8)	# D.4873, *_402
.LVL23:
	je	.L43	#,
	movl	%edx, %eax	# D.4877, D.4877
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	subl	%ebx, %eax	# nx, D.4877
	addl	$6, %eax	#, D.4877
	cmpl	$7, %esi	#, prologue_after_cost_adjust.9
	cltq
	vcvtss2sd	(%r9,%rax,4), %xmm1, %xmm1	# *_419, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rax,8)	# D.4873, *_417
.LVL24:
	je	.L44	#,
	movl	%edx, %eax	# D.4877, D.4877
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	subl	%ebx, %eax	# nx, D.4877
	addl	$7, %eax	#, D.4877
	cltq
	vcvtss2sd	(%r9,%rax,4), %xmm1, %xmm1	# *_337, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rax,8)	# D.4873, *_342
.LVL25:
	.loc 1 45 0
	movl	$8, %eax	#, x
.LVL26:
.L11:
	cmpl	%esi, %ebx	# prologue_after_cost_adjust.9, nx
	je	.L18	#,
.L10:
	movl	%esi, %ecx	# prologue_after_cost_adjust.9, prolog_loop_adjusted_niters.10
	movq	%rcx, -88(%rbp)	# prolog_loop_adjusted_niters.10, %sfp
	movl	%ebx, %ecx	# nx, niters.11
	subl	%esi, %ecx	# prologue_after_cost_adjust.9, niters.11
	movl	%ecx, -80(%rbp)	# niters.11, %sfp
	subl	$8, %ecx	#, D.4877
	shrl	$3, %ecx	#, D.4877
	addl	$1, %ecx	#, bnd.12
	leal	0(,%rcx,8), %r10d	#, ratio_mult_vf.13
	movl	%r10d, -72(%rbp)	# ratio_mult_vf.13, %sfp
	movl	-96(%rbp), %r10d	# %sfp, D.4877
	subl	%esi, %r10d	# prologue_after_cost_adjust.9, D.4877
	cmpl	$6, %r10d	#, D.4877
	jbe	.L13	#,
	addq	-88(%rbp), %rdi	# %sfp, D.4875
	movl	%eax, -152(%rbp)	# x, %sfp
	vbroadcastsd	%xmm0, %ymm3	# Sum1, vect_cst_.20
	xorl	%esi, %esi	# ivtmp.70
	leaq	(%r9,%rdi,4), %r10	#, vectp.16
	leaq	(%r15,%rdi,8), %rdi	#, vectp.22
	movq	%rdi, -88(%rbp)	# vectp.22, %sfp
	movq	-88(%rbp), %rax	# %sfp, vectp.22
	xorl	%edi, %edi	# ivtmp.63
.L15:
	.loc 1 47 0
	vmovups	(%r10,%rsi), %xmm1	# MEM[base: vectp.16_278, index: ivtmp.70_104, offset: 0B], MEM[base: vectp.16_278, index: ivtmp.70_104, offset: 0B]
	addl	$1, %edi	#, ivtmp.63
	vinsertf128	$0x1, 16(%r10,%rsi), %ymm1, %ymm1	# MEM[base: vectp.16_278, index: ivtmp.70_104, offset: 0B], MEM[base: vectp.16_278, index: ivtmp.70_104, offset: 0B], tmp502
	vcvtps2pd	%xmm1, %ymm2	# tmp502, vect__91.18
	vextractf128	$0x1, %ymm1, %xmm1	# tmp502, tmp507
	vsubpd	%ymm3, %ymm2, %ymm2	# vect_cst_.20, vect__91.18, vect__92.19
	vcvtps2pd	%xmm1, %ymm1	# tmp507, vect__91.18
	vsubpd	%ymm3, %ymm1, %ymm1	# vect_cst_.20, vect__91.18, vect__92.19
	vmovapd	%ymm2, (%rax,%rsi,2)	# vect__92.19, MEM[base: vectp.22_266, index: ivtmp.70_104, step: 2, offset: 0B]
	vmovapd	%ymm1, 32(%rax,%rsi,2)	# vect__92.19, MEM[base: vectp.22_266, index: ivtmp.70_104, step: 2, offset: 32B]
	addq	$32, %rsi	#, ivtmp.70
	cmpl	%ecx, %edi	# bnd.12, ivtmp.63
	jb	.L15	#,
	movl	-72(%rbp), %edi	# %sfp, ratio_mult_vf.13
	movl	-152(%rbp), %eax	# %sfp, x
	addl	%edi, %eax	# ratio_mult_vf.13, x
	cmpl	-80(%rbp), %edi	# %sfp, ratio_mult_vf.13
	je	.L18	#,
.L13:
.LVL27:
	leal	(%r8,%rax), %ecx	#, D.4868
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	movslq	%ecx, %rcx	# D.4868, D.4869
	vcvtss2sd	(%r9,%rcx,4), %xmm1, %xmm1	# *_319, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rcx,8)	# D.4873, *_290
	.loc 1 45 0
	leal	1(%rax), %ecx	#, x
.LVL28:
	cmpl	%ecx, %ebx	# x, nx
	jle	.L18	#,
	.loc 1 47 0
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	addl	%r8d, %ecx	# i1, D.4868
.LVL29:
	movslq	%ecx, %rcx	# D.4868, D.4869
	vcvtss2sd	(%r9,%rcx,4), %xmm1, %xmm1	# *_254, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rcx,8)	# D.4873, *_93
	.loc 1 45 0
	leal	2(%rax), %ecx	#, x
.LVL30:
	cmpl	%ecx, %ebx	# x, nx
	jle	.L18	#,
	.loc 1 47 0
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	addl	%r8d, %ecx	# i1, D.4868
.LVL31:
	movslq	%ecx, %rcx	# D.4868, D.4869
	vcvtss2sd	(%r9,%rcx,4), %xmm1, %xmm1	# *_241, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rcx,8)	# D.4873, *_243
	.loc 1 45 0
	leal	3(%rax), %ecx	#, x
.LVL32:
	cmpl	%ecx, %ebx	# x, nx
	jle	.L18	#,
	.loc 1 47 0
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	addl	%r8d, %ecx	# i1, D.4868
.LVL33:
	movslq	%ecx, %rcx	# D.4868, D.4869
	vcvtss2sd	(%r9,%rcx,4), %xmm1, %xmm1	# *_228, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rcx,8)	# D.4873, *_230
	.loc 1 45 0
	leal	4(%rax), %ecx	#, x
.LVL34:
	cmpl	%ecx, %ebx	# x, nx
	jle	.L18	#,
	.loc 1 47 0
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	addl	%r8d, %ecx	# i1, D.4868
.LVL35:
	movslq	%ecx, %rcx	# D.4868, D.4869
	vcvtss2sd	(%r9,%rcx,4), %xmm1, %xmm1	# *_178, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rcx,8)	# D.4873, *_181
	.loc 1 45 0
	leal	5(%rax), %ecx	#, x
.LVL36:
	cmpl	%ecx, %ebx	# x, nx
	jle	.L18	#,
	.loc 1 47 0
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	addl	%r8d, %ecx	# i1, D.4868
.LVL37:
	.loc 1 45 0
	addl	$6, %eax	#, x
.LVL38:
	.loc 1 47 0
	movslq	%ecx, %rcx	# D.4868, D.4869
	.loc 1 45 0
	cmpl	%eax, %ebx	# x, nx
	.loc 1 47 0
	vcvtss2sd	(%r9,%rcx,4), %xmm1, %xmm1	# *_164, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm1	# Sum1, D.4873, D.4873
	vmovsd	%xmm1, (%r15,%rcx,8)	# D.4873, *_166
.LVL39:
	.loc 1 45 0
	jle	.L18	#,
	.loc 1 47 0
	vxorpd	%xmm1, %xmm1, %xmm1	# D.4873
	addl	%r8d, %eax	# i1, D.4868
	cltq
	vcvtss2sd	(%r9,%rax,4), %xmm1, %xmm1	# *_300, D.4873, D.4873
	vsubsd	%xmm0, %xmm1, %xmm0	# Sum1, D.4873, D.4873
.LVL40:
	vmovsd	%xmm0, (%r15,%rax,8)	# D.4873, *_304
.L18:
.LVL41:
.LBE25:
.LBB26:
	.loc 1 54 0
	testl	%r12d, %r12d	# D.4868
	jle	.L62	#,
	movq	-128(%rbp), %rax	# %sfp, D.4876
	vmovapd	%xmm4, %xmm0	# Sum, Sum2
	vmovapd	%xmm4, %xmm1	# Sum, Sum1
	leaq	0(%r13,%rax), %rcx	#, ivtmp.61
	xorl	%eax, %eax	# ivtmp.52
.LVL42:
	.p2align 4,,10
	.p2align 3
.L19:
	.loc 1 56 0
	vmovsd	0(%r13,%rax,8), %xmm2	# MEM[base: _440, index: ivtmp.52_217, step: 8, offset: 0B], D.4873
	addq	$1, %rax	#, ivtmp.52
.LVL43:
	subq	$8, %rcx	#, ivtmp.61
	vfmadd231sd	%xmm2, %xmm2, %xmm1	# D.4873, D.4873, Sum1
.LVL44:
	.loc 1 57 0
	vmovsd	8(%rcx), %xmm2	# MEM[base: _441, offset: 0B], D.4873
	.loc 1 54 0
	cmpl	%eax, %r12d	# ivtmp.52, D.4868
	.loc 1 57 0
	vfmadd231sd	%xmm2, %xmm2, %xmm0	# D.4873, D.4873, Sum2
.LVL45:
	.loc 1 54 0
	jg	.L19	#,
	movslq	%r11d, %rax	# ivtmp.92,
.LVL46:
.L7:
.LBE26:
	.loc 1 63 0
	movl	-60(%rbp), %ecx	# %sfp,
	testl	%ecx, %ecx	#
	je	.L20	#,
	.loc 1 66 0
	vmovsd	8(%r15,%rax,8), %xmm2	# *_117, D.4873
	vfnmadd231sd	%xmm2, %xmm2, %xmm0	# D.4873, D.4873, Sum2
.LVL47:
.L20:
	addl	%ebx, -64(%rbp)	# nx, %sfp
.LVL48:
.LBB27:
	.loc 1 72 0
	testl	%ebx, %ebx	# nx
.LBE27:
	.loc 1 70 0
	vaddsd	%xmm1, %xmm0, %xmm2	# Sum1, Sum2, Sum1
.LVL49:
.LBB28:
	.loc 1 72 0
	jle	.L26	#,
	leaq	(%r15,%r8,8), %rax	#, ivtmp.49
	addq	-136(%rbp), %r8	# %sfp, D.4875
	vsqrtsd	%xmm2, %xmm3, %xmm3	# Sum1, tmp553
	leaq	(%r15,%r8,8), %rcx	#, D.4876
.LVL50:
	.p2align 4,,10
	.p2align 3
.L27:
	.loc 1 74 0
	vucomisd	%xmm3, %xmm3	# tmp553, tmp553
	vmovsd	(%rax), %xmm1	# MEM[base: _256, offset: 0B], D.4873
	vmovapd	%xmm3, %xmm0	# tmp553, tmp537
	jp	.L63	#,
.L24:
	vdivsd	%xmm0, %xmm1, %xmm0	# tmp537, D.4873, D.4873
	addq	$8, %rax	#, ivtmp.49
	vmovsd	%xmm0, -8(%rax)	# D.4873, MEM[base: _256, offset: 0B]
	.loc 1 72 0
	cmpq	%rcx, %rax	# D.4876, ivtmp.49
	jne	.L27	#,
.L26:
.LVL51:
.LBE28:
.LBE19:
	.loc 1 12 0
	addl	$1, -56(%rbp)	#, %sfp
	addl	%ebx, %r11d	# nx, ivtmp.92
	addq	-104(%rbp), %r14	# %sfp, ivtmp.103
	movl	-56(%rbp), %eax	# %sfp, y
.LVL52:
	addq	-112(%rbp), %r13	# %sfp, ivtmp.106
	cmpl	%eax, -92(%rbp)	# y, %sfp
	je	.L22	#,
.LBB35:
.LBB29:
	.loc 1 17 0
	testl	%r12d, %r12d	# D.4868
.LBE29:
	.loc 1 31 0
	movslq	%edx, %r8	# D.4877,
.LVL53:
.LBB30:
	.loc 1 17 0
	jg	.L64	#,
.LVL54:
.L35:
	movslq	-64(%rbp), %rax	# %sfp,
	vmovapd	%xmm4, %xmm0	# Sum, Sum2
	vmovapd	%xmm4, %xmm1	# Sum, Sum1
	jmp	.L3	#
.LVL55:
.L37:
.LBE30:
.LBB31:
	.loc 1 45 0
	xorl	%eax, %eax	# x
	jmp	.L10	#
.LVL56:
.L63:
.LBE31:
.LBB32:
	.loc 1 74 0
	vmovapd	%xmm2, %xmm0	# Sum1,
	movq	%r9, -200(%rbp)	# data, %sfp
	movl	%edx, -188(%rbp)	# D.4877, %sfp
	movq	%rcx, -184(%rbp)	# D.4876, %sfp
	vmovsd	%xmm4, -168(%rbp)	# Sum, %sfp
	movq	%rax, -176(%rbp)	# ivtmp.49, %sfp
	movl	%r11d, -144(%rbp)	# ivtmp.92, %sfp
	vmovsd	%xmm3, -152(%rbp)	# tmp553, %sfp
	vmovsd	%xmm5, -88(%rbp)	# D.4873, %sfp
	vmovsd	%xmm1, -80(%rbp)	# D.4873, %sfp
	vmovsd	%xmm2, -72(%rbp)	# Sum1, %sfp
	vzeroupper
	call	sqrt	#
.LVL57:
	movq	-200(%rbp), %r9	# %sfp, data
	movl	-188(%rbp), %edx	# %sfp, D.4877
	movq	-184(%rbp), %rcx	# %sfp, D.4876
	movq	-176(%rbp), %rax	# %sfp, ivtmp.49
	movl	-144(%rbp), %r11d	# %sfp, ivtmp.92
	vmovsd	-168(%rbp), %xmm4	# %sfp, Sum
	vmovsd	-152(%rbp), %xmm3	# %sfp, tmp553
	vmovsd	-88(%rbp), %xmm5	# %sfp, D.4873
	vmovsd	-80(%rbp), %xmm1	# %sfp, D.4873
	vmovsd	-72(%rbp), %xmm2	# %sfp, Sum1
	jmp	.L24	#
.LVL58:
.L65:
	addq	$1, %r10	#, ivtmp.39
.LVL59:
.L33:
.LBE32:
.LBE35:
.LBE38:
.LBE17:
.LBE16:
.LBB45:
.LBB46:
	.loc 1 126 0
	addl	$1, %r11d	#, j
.LVL60:
	addl	%ebx, %r12d	# nx, ivtmp.41
	addl	%r15d, %r13d	# ny, ivtmp.42
	cmpl	%r11d, %r15d	# j, ny
	jne	.L30	#,
	vzeroupper
.LVL61:
.L29:
.LBE46:
.LBE45:
	.loc 1 154 0
	addq	$168, %rsp	#,
	.loc 1 152 0
	movq	%rax, %rdi	# ProcessedData,
	.loc 1 154 0
	popq	%rbx	#
.LVL62:
	popq	%r12	#
	popq	%r13	#
	.cfi_remember_state
	.cfi_def_cfa 13, 0
	popq	%r14	#
	popq	%r15	#
	popq	%rbp	#
.LVL63:
	leaq	-16(%r13), %rsp	#,
	.cfi_def_cfa 7, 16
.LVL64:
	popq	%r13	#
	.cfi_def_cfa_offset 8
	.loc 1 152 0
	jmp	free	#
.LVL65:
.L62:
	.cfi_restore_state
.LBB59:
.LBB42:
.LBB39:
.LBB36:
.LBB33:
	.loc 1 54 0
	movslq	-64(%rbp), %rax	# %sfp,
	vmovapd	%xmm4, %xmm0	# Sum, Sum2
	vmovapd	%xmm4, %xmm1	# Sum, Sum1
	jmp	.L7	#
.LVL66:
.L22:
	movl	-92(%rbp), %edi	# %sfp, ny
.LBE33:
.LBE36:
.LBE39:
.LBE42:
.LBE59:
.LBB60:
.LBB57:
.LBB47:
.LBB48:
.LBB49:
	.loc 1 132 0
	vxorps	%xmm1, %xmm1, %xmm1	# D.4872
	movq	%r15, %rax	# ProcessedData, ProcessedData
.LVL67:
.LBE49:
.LBE48:
.LBE47:
.LBE57:
.LBE60:
.LBB61:
.LBB43:
.LBB40:
	.loc 1 12 0
	xorl	%r13d, %r13d	# ivtmp.42
	xorl	%r12d, %r12d	# ivtmp.41
	xorl	%r10d, %r10d	# ivtmp.39
	xorl	%r11d, %r11d	# j
	leal	-1(%rdi), %r14d	#, D.4877
.LBE40:
.LBE43:
.LBE61:
.LBB62:
.LBB58:
.LBB56:
.LBB53:
.LBB50:
	.loc 1 132 0
	movl	%edi, %r15d	# ny, ny
.LVL68:
	movl	%r14d, -56(%rbp)	# D.4877, %sfp
.LVL69:
	movq	-160(%rbp), %r14	# %sfp, result
.LVL70:
.L30:
.LBE50:
.LBE53:
	.loc 1 128 0
	cmpl	%r11d, %r15d	# j, ny
	jle	.L65	#,
	movslq	%r13d, %rdx	# ivtmp.42, D.4869
	movl	%r12d, %r8d	# ivtmp.41, ivtmp.36
.LVL71:
	leaq	(%rdx,%r10), %rcx	#, D.4869
	addq	$1, %r10	#, ivtmp.39
	addq	%r10, %rdx	# ivtmp.39, D.4875
	leaq	(%r14,%rcx,4), %rdi	#, ivtmp.34
	movl	-56(%rbp), %ecx	# %sfp, D.4875
	subl	%r11d, %ecx	# j, D.4875
	addq	%rcx, %rdx	# D.4875, D.4875
.LBB54:
.LBB51:
	.loc 1 132 0
	testl	%ebx, %ebx	# nx
	leaq	(%r14,%rdx,4), %r9	#, D.4876
	movslq	%r12d, %rdx	# ivtmp.41, D.4875
	leaq	(%rax,%rdx,8), %rsi	#, D.4871
	jle	.L45	#,
	.p2align 4,,10
	.p2align 3
.L66:
	movslq	%r8d, %rdx	# ivtmp.36, D.4875
	vmovapd	%xmm4, %xmm0	# Sum, Sum
	leaq	(%rax,%rdx,8), %rcx	#, D.4871
	xorl	%edx, %edx	# ivtmp.24
.LVL72:
	.p2align 4,,10
	.p2align 3
.L32:
	.loc 1 134 0
	vmovsd	(%rsi,%rdx,8), %xmm6	# MEM[base: _347, index: ivtmp.24_222, step: 8, offset: 0B], tmp674
	vfmadd231sd	(%rcx,%rdx,8), %xmm6, %xmm0	# MEM[base: _413, index: ivtmp.24_222, step: 8, offset: 0B], tmp674, Sum
.LVL73:
	addq	$1, %rdx	#, ivtmp.24
.LVL74:
	.loc 1 132 0
	cmpl	%edx, %ebx	# ivtmp.24, nx
	jg	.L32	#,
	vcvtsd2ss	%xmm0, %xmm0, %xmm0	# Sum, D.4872
.LVL75:
.L31:
.LBE51:
	.loc 1 137 0
	vmovss	%xmm0, (%rdi)	# D.4872, MEM[base: _395, offset: 0B]
	addq	$4, %rdi	#, ivtmp.34
	addl	%ebx, %r8d	# nx, ivtmp.36
.LBE54:
	.loc 1 128 0
	cmpq	%r9, %rdi	# D.4876, ivtmp.34
	je	.L33	#,
.LVL76:
.LBB55:
.LBB52:
	.loc 1 132 0
	testl	%ebx, %ebx	# nx
	jg	.L66	#,
.L45:
	vmovaps	%xmm1, %xmm0	# D.4872, D.4872
	jmp	.L31	#
.LVL77:
.L44:
.LBE52:
.LBE55:
.LBE56:
.LBE58:
.LBE62:
.LBB63:
.LBB44:
.LBB41:
.LBB37:
.LBB34:
	.loc 1 45 0
	movl	$7, %eax	#, x
	jmp	.L11	#
.LVL78:
.L43:
	movl	$6, %eax	#, x
	jmp	.L11	#
.LVL79:
.L42:
	movl	$5, %eax	#, x
	jmp	.L11	#
.LVL80:
.L41:
	movl	$4, %eax	#, x
	jmp	.L11	#
.LVL81:
.L40:
	movl	$3, %eax	#, x
	jmp	.L11	#
.LVL82:
.L39:
	movl	$2, %eax	#, x
	jmp	.L11	#
.LVL83:
.L38:
	movl	$1, %eax	#, x
	jmp	.L11	#
.LBE34:
.LBE37:
.LBE41:
.LBE44:
.LBE63:
	.cfi_endproc
.LFE21:
	.size	correlate(int, int, float const*, float*), .-correlate(int, int, float const*, float*)
	.section	.text.unlikely
.LCOLDE2:
	.text
.LHOTE2:
.Letext0:
	.section	.text.unlikely
.Letext_cold0:
	.file 2 "cp.h"
	.file 3 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h"
	.file 4 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x416
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF27
	.byte	0x4
	.long	.LASF28
	.long	.LASF29
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.byte	0x8
	.byte	0x4
	.long	.LASF0
	.uleb128 0x2
	.byte	0x4
	.byte	0x4
	.long	.LASF1
	.uleb128 0x2
	.byte	0x4
	.byte	0x7
	.long	.LASF2
	.uleb128 0x3
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.long	.LASF3
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.long	.LASF4
	.uleb128 0x2
	.byte	0x1
	.byte	0x8
	.long	.LASF5
	.uleb128 0x2
	.byte	0x2
	.byte	0x7
	.long	.LASF6
	.uleb128 0x2
	.byte	0x1
	.byte	0x6
	.long	.LASF7
	.uleb128 0x2
	.byte	0x2
	.byte	0x5
	.long	.LASF8
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.long	.LASF9
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.long	.LASF10
	.uleb128 0x2
	.byte	0x8
	.byte	0x5
	.long	.LASF11
	.uleb128 0x2
	.byte	0x8
	.byte	0x7
	.long	.LASF12
	.uleb128 0x4
	.long	.LASF15
	.byte	0x1
	.byte	0x7c
	.long	.LASF17
	.byte	0x3
	.long	0xf8
	.uleb128 0x5
	.long	.LASF13
	.byte	0x1
	.byte	0x7c
	.long	0xf8
	.uleb128 0x5
	.long	.LASF14
	.byte	0x1
	.byte	0x7c
	.long	0xfe
	.uleb128 0x6
	.string	"nx"
	.byte	0x1
	.byte	0x7c
	.long	0x42
	.uleb128 0x6
	.string	"ny"
	.byte	0x1
	.byte	0x7c
	.long	0x42
	.uleb128 0x7
	.uleb128 0x8
	.string	"i"
	.byte	0x1
	.byte	0x7e
	.long	0x42
	.uleb128 0x7
	.uleb128 0x8
	.string	"j"
	.byte	0x1
	.byte	0x80
	.long	0x42
	.uleb128 0x7
	.uleb128 0x8
	.string	"Sum"
	.byte	0x1
	.byte	0x82
	.long	0x2d
	.uleb128 0x7
	.uleb128 0x8
	.string	"k"
	.byte	0x1
	.byte	0x84
	.long	0x42
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x9
	.byte	0x8
	.long	0x2d
	.uleb128 0x9
	.byte	0x8
	.long	0x34
	.uleb128 0x4
	.long	.LASF16
	.byte	0x1
	.byte	0x6
	.long	.LASF18
	.byte	0x3
	.long	0x1d6
	.uleb128 0x5
	.long	.LASF19
	.byte	0x1
	.byte	0x6
	.long	0x1d6
	.uleb128 0x5
	.long	.LASF13
	.byte	0x1
	.byte	0x6
	.long	0xf8
	.uleb128 0x6
	.string	"nx"
	.byte	0x1
	.byte	0x6
	.long	0x42
	.uleb128 0x6
	.string	"ny"
	.byte	0x1
	.byte	0x6
	.long	0x42
	.uleb128 0x8
	.string	"i1"
	.byte	0x1
	.byte	0x9
	.long	0x42
	.uleb128 0x8
	.string	"i2"
	.byte	0x1
	.byte	0x9
	.long	0x42
	.uleb128 0x8
	.string	"i3"
	.byte	0x1
	.byte	0x9
	.long	0x42
	.uleb128 0x8
	.string	"i4"
	.byte	0x1
	.byte	0xa
	.long	0x42
	.uleb128 0x8
	.string	"i5"
	.byte	0x1
	.byte	0xa
	.long	0x42
	.uleb128 0x8
	.string	"i6"
	.byte	0x1
	.byte	0xa
	.long	0x42
	.uleb128 0x7
	.uleb128 0x8
	.string	"y"
	.byte	0x1
	.byte	0xc
	.long	0x42
	.uleb128 0x7
	.uleb128 0xa
	.long	.LASF20
	.byte	0x1
	.byte	0xe
	.long	0x2d
	.uleb128 0xa
	.long	.LASF21
	.byte	0x1
	.byte	0xe
	.long	0x2d
	.uleb128 0xb
	.long	0x1aa
	.uleb128 0x8
	.string	"x"
	.byte	0x1
	.byte	0x11
	.long	0x42
	.byte	0
	.uleb128 0xb
	.long	0x1b9
	.uleb128 0x8
	.string	"x"
	.byte	0x1
	.byte	0x2d
	.long	0x42
	.byte	0
	.uleb128 0xb
	.long	0x1c8
	.uleb128 0x8
	.string	"x"
	.byte	0x1
	.byte	0x36
	.long	0x42
	.byte	0
	.uleb128 0x7
	.uleb128 0x8
	.string	"x"
	.byte	0x1
	.byte	0x48
	.long	0x42
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x9
	.byte	0x8
	.long	0x1dc
	.uleb128 0xc
	.long	0x34
	.uleb128 0xd
	.long	.LASF30
	.byte	0x1
	.byte	0x90
	.long	.LASF31
	.quad	.LFB21
	.quad	.LFE21-.LFB21
	.uleb128 0x1
	.byte	0x9c
	.long	0x3de
	.uleb128 0xe
	.string	"ny"
	.byte	0x1
	.byte	0x90
	.long	0x42
	.long	.LLST0
	.uleb128 0xe
	.string	"nx"
	.byte	0x1
	.byte	0x90
	.long	0x42
	.long	.LLST1
	.uleb128 0xf
	.long	.LASF19
	.byte	0x1
	.byte	0x90
	.long	0x1d6
	.long	.LLST2
	.uleb128 0xf
	.long	.LASF14
	.byte	0x1
	.byte	0x90
	.long	0xfe
	.long	.LLST3
	.uleb128 0x10
	.long	.LASF13
	.byte	0x1
	.byte	0x92
	.long	0xf8
	.long	.LLST4
	.uleb128 0x11
	.long	0x104
	.quad	.LBB16
	.long	.Ldebug_ranges0+0
	.byte	0x1
	.byte	0x94
	.long	0x342
	.uleb128 0x12
	.long	0x134
	.long	.LLST5
	.uleb128 0x12
	.long	0x12a
	.long	.LLST6
	.uleb128 0x12
	.long	0x11f
	.long	.LLST4
	.uleb128 0x12
	.long	0x114
	.long	.LLST8
	.uleb128 0x13
	.long	.Ldebug_ranges0+0
	.uleb128 0x14
	.long	0x13e
	.long	.LLST9
	.uleb128 0x14
	.long	0x148
	.long	.LLST10
	.uleb128 0x15
	.long	0x152
	.uleb128 0x14
	.long	0x15c
	.long	.LLST11
	.uleb128 0x14
	.long	0x166
	.long	.LLST12
	.uleb128 0x15
	.long	0x170
	.uleb128 0x13
	.long	.Ldebug_ranges0+0x50
	.uleb128 0x14
	.long	0x17b
	.long	.LLST13
	.uleb128 0x13
	.long	.Ldebug_ranges0+0xb0
	.uleb128 0x14
	.long	0x185
	.long	.LLST14
	.uleb128 0x14
	.long	0x190
	.long	.LLST15
	.uleb128 0x16
	.long	.Ldebug_ranges0+0x100
	.long	0x2f1
	.uleb128 0x14
	.long	0x1af
	.long	.LLST16
	.byte	0
	.uleb128 0x16
	.long	.Ldebug_ranges0+0x170
	.long	0x304
	.uleb128 0x14
	.long	0x1a0
	.long	.LLST17
	.byte	0
	.uleb128 0x16
	.long	.Ldebug_ranges0+0x1c0
	.long	0x317
	.uleb128 0x14
	.long	0x1be
	.long	.LLST18
	.byte	0
	.uleb128 0x13
	.long	.Ldebug_ranges0+0x1f0
	.uleb128 0x14
	.long	0x1c9
	.long	.LLST19
	.uleb128 0x17
	.quad	.LVL57
	.long	0x3f6
	.uleb128 0x18
	.uleb128 0x1
	.byte	0x61
	.uleb128 0x6
	.byte	0x76
	.sleb128 -72
	.byte	0xf6
	.byte	0x8
	.uleb128 0x2d
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x11
	.long	0x8f
	.quad	.LBB45
	.long	.Ldebug_ranges0+0x230
	.byte	0x1
	.byte	0x96
	.long	0x3aa
	.uleb128 0x19
	.long	0xbf
	.uleb128 0x19
	.long	0xb5
	.uleb128 0x19
	.long	0xaa
	.uleb128 0x19
	.long	0x9f
	.uleb128 0x13
	.long	.Ldebug_ranges0+0x230
	.uleb128 0x14
	.long	0xca
	.long	.LLST20
	.uleb128 0x13
	.long	.Ldebug_ranges0+0x240
	.uleb128 0x14
	.long	0xd4
	.long	.LLST21
	.uleb128 0x13
	.long	.Ldebug_ranges0+0x270
	.uleb128 0x14
	.long	0xde
	.long	.LLST22
	.uleb128 0x13
	.long	.Ldebug_ranges0+0x2c0
	.uleb128 0x14
	.long	0xea
	.long	.LLST23
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x1a
	.quad	.LVL3
	.long	0x401
	.long	0x3d0
	.uleb128 0x18
	.uleb128 0x1
	.byte	0x55
	.uleb128 0xb
	.byte	0x7f
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x1e
	.byte	0x8
	.byte	0x20
	.byte	0x24
	.byte	0x8
	.byte	0x20
	.byte	0x26
	.uleb128 0x18
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x38
	.byte	0
	.uleb128 0x1b
	.quad	.LVL65
	.long	0x40d
	.byte	0
	.uleb128 0x1c
	.long	.LASF22
	.byte	0x2
	.byte	0x13
	.long	0x3f1
	.byte	0x1
	.uleb128 0x2
	.byte	0x1
	.byte	0x2
	.long	.LASF23
	.uleb128 0xc
	.long	0x3ea
	.uleb128 0x1d
	.long	.LASF24
	.long	.LASF24
	.byte	0x3
	.byte	0x9c
	.uleb128 0x1e
	.long	.LASF25
	.long	.LASF25
	.byte	0x4
	.value	0x1d4
	.uleb128 0x1e
	.long	.LASF26
	.long	.LASF26
	.byte	0x4
	.value	0x1e3
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0xb
	.byte	0x1
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x34
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x4109
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x410a
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x2111
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x4109
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x4109
	.byte	0
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x2115
	.uleb128 0x19
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1c
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
.LLST0:
	.quad	.LVL0-.Ltext0
	.quad	.LVL1-.Ltext0
	.value	0x1
	.byte	0x55
	.quad	.LVL1-.Ltext0
	.quad	.LVL7-.Ltext0
	.value	0x1
	.byte	0x5f
	.quad	.LVL7-.Ltext0
	.quad	.LVL63-.Ltext0
	.value	0x3
	.byte	0x76
	.sleb128 -92
	.quad	.LVL63-.Ltext0
	.quad	.LVL64-.Ltext0
	.value	0x3
	.byte	0x77
	.sleb128 -100
	.quad	.LVL64-.Ltext0
	.quad	.LVL65-.Ltext0
	.value	0x8
	.byte	0x91
	.sleb128 -16
	.byte	0x9
	.byte	0xe0
	.byte	0x1a
	.byte	0x8
	.byte	0x6c
	.byte	0x1c
	.quad	.LVL65-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x3
	.byte	0x76
	.sleb128 -92
	.quad	0
	.quad	0
.LLST1:
	.quad	.LVL0-.Ltext0
	.quad	.LVL2-.Ltext0
	.value	0x1
	.byte	0x54
	.quad	.LVL2-.Ltext0
	.quad	.LVL62-.Ltext0
	.value	0x1
	.byte	0x53
	.quad	.LVL62-.Ltext0
	.quad	.LVL65-.Ltext0
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.quad	.LVL65-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x1
	.byte	0x53
	.quad	0
	.quad	0
.LLST2:
	.quad	.LVL0-.Ltext0
	.quad	.LVL3-1-.Ltext0
	.value	0x1
	.byte	0x51
	.quad	.LVL3-1-.Ltext0
	.quad	.LVL6-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -56
	.quad	.LVL6-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x51
	.byte	0x9f
	.quad	0
	.quad	0
.LLST3:
	.quad	.LVL0-.Ltext0
	.quad	.LVL3-1-.Ltext0
	.value	0x1
	.byte	0x52
	.quad	.LVL3-1-.Ltext0
	.quad	.LVL63-.Ltext0
	.value	0x3
	.byte	0x76
	.sleb128 -160
	.quad	.LVL63-.Ltext0
	.quad	.LVL64-.Ltext0
	.value	0x3
	.byte	0x77
	.sleb128 -168
	.quad	.LVL64-.Ltext0
	.quad	.LVL65-.Ltext0
	.value	0x8
	.byte	0x91
	.sleb128 -16
	.byte	0x9
	.byte	0xe0
	.byte	0x1a
	.byte	0x8
	.byte	0xb0
	.byte	0x1c
	.quad	.LVL65-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x3
	.byte	0x76
	.sleb128 -160
	.quad	0
	.quad	0
.LLST4:
	.quad	.LVL3-.Ltext0
	.quad	.LVL8-.Ltext0
	.value	0x1
	.byte	0x50
	.quad	.LVL8-.Ltext0
	.quad	.LVL58-.Ltext0
	.value	0x1
	.byte	0x5f
	.quad	.LVL58-.Ltext0
	.quad	.LVL65-1-.Ltext0
	.value	0x1
	.byte	0x50
	.quad	.LVL65-.Ltext0
	.quad	.LVL68-.Ltext0
	.value	0x1
	.byte	0x5f
	.quad	.LVL68-.Ltext0
	.quad	.LVL77-.Ltext0
	.value	0x1
	.byte	0x50
	.quad	.LVL77-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x1
	.byte	0x5f
	.quad	0
	.quad	0
.LLST5:
	.quad	.LVL3-.Ltext0
	.quad	.LVL7-.Ltext0
	.value	0x1
	.byte	0x5f
	.quad	.LVL7-.Ltext0
	.quad	.LVL63-.Ltext0
	.value	0x3
	.byte	0x76
	.sleb128 -92
	.quad	.LVL63-.Ltext0
	.quad	.LVL64-.Ltext0
	.value	0x3
	.byte	0x77
	.sleb128 -100
	.quad	.LVL64-.Ltext0
	.quad	.LVL65-.Ltext0
	.value	0x8
	.byte	0x91
	.sleb128 -16
	.byte	0x9
	.byte	0xe0
	.byte	0x1a
	.byte	0x8
	.byte	0x6c
	.byte	0x1c
	.quad	.LVL65-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x3
	.byte	0x76
	.sleb128 -92
	.quad	0
	.quad	0
.LLST6:
	.quad	.LVL3-.Ltext0
	.quad	.LVL62-.Ltext0
	.value	0x1
	.byte	0x53
	.quad	.LVL62-.Ltext0
	.quad	.LVL65-.Ltext0
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.quad	.LVL65-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x1
	.byte	0x53
	.quad	0
	.quad	0
.LLST8:
	.quad	.LVL3-.Ltext0
	.quad	.LVL6-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -56
	.quad	.LVL6-.Ltext0
	.quad	.LVL8-.Ltext0
	.value	0x1
	.byte	0x59
	.quad	0
	.quad	0
.LLST9:
	.quad	.LVL3-.Ltext0
	.quad	.LVL7-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	.LVL7-.Ltext0
	.quad	.LVL9-.Ltext0
	.value	0x1
	.byte	0x58
	.quad	.LVL9-.Ltext0
	.quad	.LVL10-.Ltext0
	.value	0x6
	.byte	0x78
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.quad	.LVL16-.Ltext0
	.quad	.LVL50-.Ltext0
	.value	0x1
	.byte	0x51
	.quad	.LVL52-.Ltext0
	.quad	.LVL53-.Ltext0
	.value	0x1
	.byte	0x51
	.quad	.LVL53-.Ltext0
	.quad	.LVL55-.Ltext0
	.value	0x1
	.byte	0x58
	.quad	.LVL55-.Ltext0
	.quad	.LVL56-.Ltext0
	.value	0x1
	.byte	0x51
	.quad	.LVL65-.Ltext0
	.quad	.LVL70-.Ltext0
	.value	0x1
	.byte	0x51
	.quad	.LVL77-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x1
	.byte	0x51
	.quad	0
	.quad	0
.LLST10:
	.quad	.LVL4-.Ltext0
	.quad	.LVL5-.Ltext0
	.value	0x1
	.byte	0x55
	.quad	.LVL5-.Ltext0
	.quad	.LVL8-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -64
	.quad	.LVL9-.Ltext0
	.quad	.LVL10-.Ltext0
	.value	0x8
	.byte	0x76
	.sleb128 -64
	.byte	0x94
	.byte	0x4
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL16-.Ltext0
	.quad	.LVL50-.Ltext0
	.value	0x8
	.byte	0x71
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x22
	.byte	0x31
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL53-.Ltext0
	.quad	.LVL54-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -64
	.quad	.LVL55-.Ltext0
	.quad	.LVL56-.Ltext0
	.value	0x8
	.byte	0x71
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x22
	.byte	0x31
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL65-.Ltext0
	.quad	.LVL66-.Ltext0
	.value	0x8
	.byte	0x71
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x22
	.byte	0x31
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL77-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x8
	.byte	0x71
	.sleb128 0
	.byte	0x73
	.sleb128 0
	.byte	0x22
	.byte	0x31
	.byte	0x1c
	.byte	0x9f
	.quad	0
	.quad	0
.LLST11:
	.quad	.LVL4-.Ltext0
	.quad	.LVL7-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	.LVL7-.Ltext0
	.quad	.LVL42-.Ltext0
	.value	0x1
	.byte	0x58
	.quad	.LVL42-.Ltext0
	.quad	.LVL43-.Ltext0
	.value	0x6
	.byte	0x78
	.sleb128 0
	.byte	0x70
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.quad	.LVL47-.Ltext0
	.quad	.LVL50-.Ltext0
	.value	0x1
	.byte	0x51
	.quad	.LVL53-.Ltext0
	.quad	.LVL56-.Ltext0
	.value	0x1
	.byte	0x58
	.quad	.LVL65-.Ltext0
	.quad	.LVL66-.Ltext0
	.value	0x1
	.byte	0x58
	.quad	.LVL77-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x1
	.byte	0x58
	.quad	0
	.quad	0
.LLST12:
	.quad	.LVL4-.Ltext0
	.quad	.LVL5-.Ltext0
	.value	0x1
	.byte	0x55
	.quad	.LVL5-.Ltext0
	.quad	.LVL8-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -64
	.quad	.LVL41-.Ltext0
	.quad	.LVL42-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -64
	.quad	.LVL42-.Ltext0
	.quad	.LVL43-.Ltext0
	.value	0x8
	.byte	0x76
	.sleb128 -64
	.byte	0x94
	.byte	0x4
	.byte	0x70
	.sleb128 0
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL47-.Ltext0
	.quad	.LVL48-.Ltext0
	.value	0x8
	.byte	0x76
	.sleb128 -64
	.byte	0x94
	.byte	0x4
	.byte	0x73
	.sleb128 0
	.byte	0x22
	.byte	0x9f
	.quad	.LVL48-.Ltext0
	.quad	.LVL54-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -64
	.quad	.LVL56-.Ltext0
	.quad	.LVL61-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -64
	.quad	.LVL65-.Ltext0
	.quad	.LVL77-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -64
	.quad	0
	.quad	0
.LLST13:
	.quad	.LVL4-.Ltext0
	.quad	.LVL7-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	.LVL7-.Ltext0
	.quad	.LVL8-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -56
	.quad	.LVL52-.Ltext0
	.quad	.LVL54-.Ltext0
	.value	0x1
	.byte	0x50
	.quad	.LVL66-.Ltext0
	.quad	.LVL67-.Ltext0
	.value	0x1
	.byte	0x50
	.quad	.LVL67-.Ltext0
	.quad	.LVL69-.Ltext0
	.value	0x2
	.byte	0x76
	.sleb128 -56
	.quad	0
	.quad	0
.LLST14:
	.quad	.LVL7-.Ltext0
	.quad	.LVL9-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL9-.Ltext0
	.quad	.LVL13-.Ltext0
	.value	0x1
	.byte	0x62
	.quad	.LVL16-.Ltext0
	.quad	.LVL40-.Ltext0
	.value	0x1
	.byte	0x61
	.quad	.LVL41-.Ltext0
	.quad	.LVL42-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL42-.Ltext0
	.quad	.LVL46-.Ltext0
	.value	0x1
	.byte	0x62
	.quad	.LVL49-.Ltext0
	.quad	.LVL50-.Ltext0
	.value	0x1
	.byte	0x63
	.quad	.LVL51-.Ltext0
	.quad	.LVL55-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL55-.Ltext0
	.quad	.LVL56-.Ltext0
	.value	0x1
	.byte	0x61
	.quad	.LVL58-.Ltext0
	.quad	.LVL61-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL65-.Ltext0
	.quad	.LVL77-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL77-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x1
	.byte	0x61
	.quad	0
	.quad	0
.LLST15:
	.quad	.LVL7-.Ltext0
	.quad	.LVL9-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL9-.Ltext0
	.quad	.LVL13-.Ltext0
	.value	0x1
	.byte	0x61
	.quad	.LVL14-.Ltext0
	.quad	.LVL15-.Ltext0
	.value	0x1
	.byte	0x61
	.quad	.LVL41-.Ltext0
	.quad	.LVL42-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL42-.Ltext0
	.quad	.LVL46-.Ltext0
	.value	0x1
	.byte	0x61
	.quad	.LVL47-.Ltext0
	.quad	.LVL50-.Ltext0
	.value	0x1
	.byte	0x61
	.quad	.LVL51-.Ltext0
	.quad	.LVL55-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL58-.Ltext0
	.quad	.LVL61-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL65-.Ltext0
	.quad	.LVL77-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	0
	.quad	0
.LLST16:
	.quad	.LVL17-.Ltext0
	.quad	.LVL18-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	.LVL18-.Ltext0
	.quad	.LVL19-.Ltext0
	.value	0x2
	.byte	0x31
	.byte	0x9f
	.quad	.LVL19-.Ltext0
	.quad	.LVL20-.Ltext0
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL20-.Ltext0
	.quad	.LVL21-.Ltext0
	.value	0x2
	.byte	0x33
	.byte	0x9f
	.quad	.LVL21-.Ltext0
	.quad	.LVL22-.Ltext0
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	.LVL22-.Ltext0
	.quad	.LVL23-.Ltext0
	.value	0x2
	.byte	0x35
	.byte	0x9f
	.quad	.LVL23-.Ltext0
	.quad	.LVL24-.Ltext0
	.value	0x2
	.byte	0x36
	.byte	0x9f
	.quad	.LVL24-.Ltext0
	.quad	.LVL25-.Ltext0
	.value	0x2
	.byte	0x37
	.byte	0x9f
	.quad	.LVL25-.Ltext0
	.quad	.LVL26-.Ltext0
	.value	0x2
	.byte	0x38
	.byte	0x9f
	.quad	.LVL27-.Ltext0
	.quad	.LVL28-.Ltext0
	.value	0x1
	.byte	0x50
	.quad	.LVL28-.Ltext0
	.quad	.LVL29-.Ltext0
	.value	0x1
	.byte	0x52
	.quad	.LVL29-.Ltext0
	.quad	.LVL30-.Ltext0
	.value	0x3
	.byte	0x70
	.sleb128 1
	.byte	0x9f
	.quad	.LVL30-.Ltext0
	.quad	.LVL31-.Ltext0
	.value	0x1
	.byte	0x52
	.quad	.LVL31-.Ltext0
	.quad	.LVL32-.Ltext0
	.value	0x3
	.byte	0x70
	.sleb128 2
	.byte	0x9f
	.quad	.LVL32-.Ltext0
	.quad	.LVL33-.Ltext0
	.value	0x1
	.byte	0x52
	.quad	.LVL33-.Ltext0
	.quad	.LVL34-.Ltext0
	.value	0x3
	.byte	0x70
	.sleb128 3
	.byte	0x9f
	.quad	.LVL34-.Ltext0
	.quad	.LVL35-.Ltext0
	.value	0x1
	.byte	0x52
	.quad	.LVL35-.Ltext0
	.quad	.LVL36-.Ltext0
	.value	0x3
	.byte	0x70
	.sleb128 4
	.byte	0x9f
	.quad	.LVL36-.Ltext0
	.quad	.LVL37-.Ltext0
	.value	0x1
	.byte	0x52
	.quad	.LVL37-.Ltext0
	.quad	.LVL38-.Ltext0
	.value	0x3
	.byte	0x70
	.sleb128 5
	.byte	0x9f
	.quad	.LVL38-.Ltext0
	.quad	.LVL39-.Ltext0
	.value	0x3
	.byte	0x70
	.sleb128 -1
	.byte	0x9f
	.quad	.LVL55-.Ltext0
	.quad	.LVL56-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	.LVL77-.Ltext0
	.quad	.LVL78-.Ltext0
	.value	0x2
	.byte	0x37
	.byte	0x9f
	.quad	.LVL78-.Ltext0
	.quad	.LVL79-.Ltext0
	.value	0x2
	.byte	0x36
	.byte	0x9f
	.quad	.LVL79-.Ltext0
	.quad	.LVL80-.Ltext0
	.value	0x2
	.byte	0x35
	.byte	0x9f
	.quad	.LVL80-.Ltext0
	.quad	.LVL81-.Ltext0
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	.LVL81-.Ltext0
	.quad	.LVL82-.Ltext0
	.value	0x2
	.byte	0x33
	.byte	0x9f
	.quad	.LVL82-.Ltext0
	.quad	.LVL83-.Ltext0
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL83-.Ltext0
	.quad	.LFE21-.Ltext0
	.value	0x2
	.byte	0x31
	.byte	0x9f
	.quad	0
	.quad	0
.LLST17:
	.quad	.LVL7-.Ltext0
	.quad	.LVL9-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	.LVL9-.Ltext0
	.quad	.LVL10-.Ltext0
	.value	0x1
	.byte	0x50
	.quad	.LVL53-.Ltext0
	.quad	.LVL55-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	0
	.quad	0
.LLST18:
	.quad	.LVL41-.Ltext0
	.quad	.LVL42-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	.LVL42-.Ltext0
	.quad	.LVL43-.Ltext0
	.value	0x1
	.byte	0x50
	.quad	.LVL65-.Ltext0
	.quad	.LVL66-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	0
	.quad	0
.LLST19:
	.quad	.LVL49-.Ltext0
	.quad	.LVL50-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	0
	.quad	0
.LLST20:
	.quad	.LVL58-.Ltext0
	.quad	.LVL61-.Ltext0
	.value	0x1
	.byte	0x5b
	.quad	.LVL70-.Ltext0
	.quad	.LVL77-.Ltext0
	.value	0x1
	.byte	0x5b
	.quad	0
	.quad	0
.LLST21:
	.quad	.LVL58-.Ltext0
	.quad	.LVL59-.Ltext0
	.value	0x1
	.byte	0x5b
	.quad	.LVL70-.Ltext0
	.quad	.LVL71-.Ltext0
	.value	0x1
	.byte	0x5b
	.quad	0
	.quad	0
.LLST22:
	.quad	.LVL71-.Ltext0
	.quad	.LVL72-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	.LVL72-.Ltext0
	.quad	.LVL75-.Ltext0
	.value	0x1
	.byte	0x61
	.quad	.LVL76-.Ltext0
	.quad	.LVL77-.Ltext0
	.value	0xa
	.byte	0x9e
	.uleb128 0x8
	.long	0
	.long	0
	.quad	0
	.quad	0
.LLST23:
	.quad	.LVL71-.Ltext0
	.quad	.LVL72-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	.LVL72-.Ltext0
	.quad	.LVL73-.Ltext0
	.value	0x1
	.byte	0x51
	.quad	.LVL73-.Ltext0
	.quad	.LVL74-.Ltext0
	.value	0x3
	.byte	0x71
	.sleb128 1
	.byte	0x9f
	.quad	.LVL76-.Ltext0
	.quad	.LVL77-.Ltext0
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	0
	.quad	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.LBB16-.Ltext0
	.quad	.LBE16-.Ltext0
	.quad	.LBB59-.Ltext0
	.quad	.LBE59-.Ltext0
	.quad	.LBB61-.Ltext0
	.quad	.LBE61-.Ltext0
	.quad	.LBB63-.Ltext0
	.quad	.LBE63-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB18-.Ltext0
	.quad	.LBE18-.Ltext0
	.quad	.LBB38-.Ltext0
	.quad	.LBE38-.Ltext0
	.quad	.LBB39-.Ltext0
	.quad	.LBE39-.Ltext0
	.quad	.LBB40-.Ltext0
	.quad	.LBE40-.Ltext0
	.quad	.LBB41-.Ltext0
	.quad	.LBE41-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB19-.Ltext0
	.quad	.LBE19-.Ltext0
	.quad	.LBB35-.Ltext0
	.quad	.LBE35-.Ltext0
	.quad	.LBB36-.Ltext0
	.quad	.LBE36-.Ltext0
	.quad	.LBB37-.Ltext0
	.quad	.LBE37-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB20-.Ltext0
	.quad	.LBE20-.Ltext0
	.quad	.LBB22-.Ltext0
	.quad	.LBE22-.Ltext0
	.quad	.LBB24-.Ltext0
	.quad	.LBE24-.Ltext0
	.quad	.LBB25-.Ltext0
	.quad	.LBE25-.Ltext0
	.quad	.LBB31-.Ltext0
	.quad	.LBE31-.Ltext0
	.quad	.LBB34-.Ltext0
	.quad	.LBE34-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB21-.Ltext0
	.quad	.LBE21-.Ltext0
	.quad	.LBB23-.Ltext0
	.quad	.LBE23-.Ltext0
	.quad	.LBB29-.Ltext0
	.quad	.LBE29-.Ltext0
	.quad	.LBB30-.Ltext0
	.quad	.LBE30-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB26-.Ltext0
	.quad	.LBE26-.Ltext0
	.quad	.LBB33-.Ltext0
	.quad	.LBE33-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB27-.Ltext0
	.quad	.LBE27-.Ltext0
	.quad	.LBB28-.Ltext0
	.quad	.LBE28-.Ltext0
	.quad	.LBB32-.Ltext0
	.quad	.LBE32-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB45-.Ltext0
	.quad	.LBE45-.Ltext0
	.quad	.LBB60-.Ltext0
	.quad	.LBE60-.Ltext0
	.quad	.LBB62-.Ltext0
	.quad	.LBE62-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB48-.Ltext0
	.quad	.LBE48-.Ltext0
	.quad	.LBB53-.Ltext0
	.quad	.LBE53-.Ltext0
	.quad	.LBB54-.Ltext0
	.quad	.LBE54-.Ltext0
	.quad	.LBB55-.Ltext0
	.quad	.LBE55-.Ltext0
	.quad	0
	.quad	0
	.quad	.LBB49-.Ltext0
	.quad	.LBE49-.Ltext0
	.quad	.LBB50-.Ltext0
	.quad	.LBE50-.Ltext0
	.quad	.LBB51-.Ltext0
	.quad	.LBE51-.Ltext0
	.quad	.LBB52-.Ltext0
	.quad	.LBE52-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF25:
	.string	"calloc"
.LASF23:
	.string	"bool"
.LASF13:
	.string	"ProcessedData"
.LASF18:
	.string	"RemoveMeans(float const*, double*, int, int)"
.LASF31:
	.string	"correlate(int, int, float const*, float*)"
.LASF1:
	.string	"float"
.LASF19:
	.string	"data"
.LASF16:
	.string	"RemoveMeans"
.LASF30:
	.string	"correlate"
.LASF4:
	.string	"long unsigned int"
.LASF6:
	.string	"short unsigned int"
.LASF0:
	.string	"double"
.LASF24:
	.string	"sqrt"
.LASF27:
	.ascii	"GNU C++14 5.4.0 20160609 -march=broadwell -mmmx -mno-3dnow -"
	.ascii	"msse -msse2 -msse3 -mssse3 -mno-sse4a -mcx16 -msahf -mmovbe "
	.ascii	"-maes -mno-sha -mpclmul -mpopcnt -mabm -mno-lwp -mfma -mno-f"
	.ascii	"ma4 -mno-xop -mbmi -mbmi2 -mno-tbm -mavx -mavx2 -msse4.2 -ms"
	.ascii	"se4.1 -mlzcnt -mrtm -mhle -mrdrnd -mf16c -mfsgsbase -mrdseed"
	.ascii	" -mprfchw -madx -mfxsr -mxsave -mxsaveopt -mno-avx512f -mno-"
	.ascii	"avx512er -mno-avx512cd -mno-avx512pf -mno-prefetchwt1 -mclfl"
	.ascii	"ushopt -mxsavec -"
	.string	"mxsaves -mno-avx512dq -mno-avx512bw -mno-avx512vl -mno-avx512ifma -mno-avx512vbmi -mno-clwb -mno-pcommit -mno-mwaitx --param l1-cache-size=32 --param l1-cache-line-size=64 --param l2-cache-size=8192 -mtune=generic -g -O3 -std=c++1z -fstack-protector-strong"
.LASF20:
	.string	"Sum1"
.LASF21:
	.string	"Sum2"
.LASF5:
	.string	"unsigned char"
.LASF2:
	.string	"unsigned int"
.LASF12:
	.string	"long long unsigned int"
.LASF14:
	.string	"result"
.LASF10:
	.string	"sizetype"
.LASF26:
	.string	"free"
.LASF11:
	.string	"long long int"
.LASF22:
	.string	"STRICT_PRECISION"
.LASF3:
	.string	"char"
.LASF28:
	.string	"cp.cc"
.LASF8:
	.string	"short int"
.LASF9:
	.string	"long int"
.LASF15:
	.string	"MatrixMultiplication"
.LASF7:
	.string	"signed char"
.LASF29:
	.string	"/u/68/koraimw1/unix/Desktop/ppc/solutions-wessamKoraim/cp2a"
.LASF17:
	.string	"MatrixMultiplication(double*, float*, int, int)"
	.ident	"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609"
	.section	.note.GNU-stack,"",@progbits
